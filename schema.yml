openapi: 3.0.3
info:
  title: DRF Quiz API
  version: 0.0.0
paths:
  /api/answers/:
    get:
      operationId: api_answers_list
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
          description: ''
    post:
      operationId: api_answers_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Answer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Answer'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
  /api/questions/:
    get:
      operationId: api_questions_list
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
          description: ''
    post:
      operationId: api_questions_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
  /api/quizes/:
    get:
      operationId: api_quizes_list
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizList'
          description: ''
    post:
      operationId: api_quizes_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuizList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuizList'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizList'
          description: ''
  /api/quizes/{id}:
    get:
      operationId: api_quizes_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizDetail'
          description: ''
    delete:
      operationId: api_quizes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/token/login/:
    post:
      operationId: api_token_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserTokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserTokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/register/:
    post:
      operationId: api_token_register_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
components:
  schemas:
    Answer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        answer:
          type: string
          maxLength: 255
        correct:
          type: boolean
        question:
          type: integer
      required:
      - answer
      - id
      - question
    DifficultyEnum:
      enum:
      - easy
      - medium
      - hard
      type: string
      description: |-
        * `easy` - easy
        * `medium` - medium
        * `hard` - hard
    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
          readOnly: true
        question:
          type: string
          maxLength: 255
        quiz:
          type: integer
      required:
      - answers
      - id
      - question
      - quiz
    QuizDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          readOnly: true
        title:
          type: string
          maxLength: 150
        topic:
          type: string
          maxLength: 100
        time_to_complete:
          type: integer
          description: duration of the quiz in minutes
        required_score:
          type: integer
          description: required score to pass in %
        difficulty:
          $ref: '#/components/schemas/DifficultyEnum'
        times_completed:
          type: integer
        created:
          type: string
          format: date-time
          readOnly: true
        creator:
          type: integer
      required:
      - created
      - creator
      - difficulty
      - id
      - questions
      - required_score
      - time_to_complete
      - title
      - topic
    QuizList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 150
        topic:
          type: string
          maxLength: 100
        time_to_complete:
          type: integer
          description: duration of the quiz in minutes
        required_score:
          type: integer
          description: required score to pass in %
        difficulty:
          $ref: '#/components/schemas/DifficultyEnum'
        times_completed:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        creator:
          type: integer
          readOnly: true
      required:
      - created
      - creator
      - difficulty
      - id
      - required_score
      - time_to_complete
      - times_completed
      - title
      - topic
    Register:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - password
      - password2
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserTokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
